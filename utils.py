""" 
This file contains utility functions to extract radio buttons, checkboxes and other
form data from the output generated by Amazon textract.

"""


import boto3
import os

class cloudClientFactory:

    """
    retrieves client account details from a dedicated .env file 
    and creates a boto client
    """

    def __init__(self):
        self.AWSClient = None

    def aws_client(self):
        if self.AWSClient is None:
            self.AWSClient = boto3.client(
            service_name=str(os.environ.get("AWS_SERVICE_NAME")),
            region_name=str(os.environ.get("AWS_REGION_NAME")),
            endpoint_url=str(os.environ.get("AWS_ENDPOINT_URL")),
            aws_access_key_id=str(os.environ.get("AWS_ACCESS_KEY_ID")),
            aws_secret_access_key=str(os.environ.get("AWS_ACCESS_KEY_SECRET")),
            )
        return self.AWSClient


def process_document(document, client):

    """
    Calls the Amazon Textract analyze_document function and returns a dictionary with the
    results.

    Args:
        document (.png, .jpeg): image of a single-page document to be passed to textract.
        client (Client Object): A low - level interface to AWS returned by class cloudClientFactory

    Returns:
        dict: A dictionary containing information of all the elements analyzed in the document
        by textextract.
    """
    

    # Get the document from local machine
    with open(document, 'rb') as doc:
        docBytes = bytearray(doc.read())

    # Analyze the document
    response = client.analyze_document(Document={'Bytes': docBytes},
                                       FeatureTypes=["FORMS"])
    
    # with open('output_module.json', 'w') as out:
    #     json.dump(response, out, indent=6)
    return response


def get_kv_map(response):

    """
    Finds and stores the IDs of SET_KEY_VALUE blocks based on whether their 'EntityType' is KEY or
    VALUE in separate dictionaries

    Args:
        response (dict): Contains information of all the elements analyzed in the document by textract.

    Returns:
        dict: returns three dictionaries of keys, values, and all the response blocks with their
        ids as the dictionary keys.
    """
    
    # Get the text blocks
    blocks = response['Blocks']

    # get key and value maps
    key_map, value_map, block_map = {}, {}, {}

    for block in blocks:
        block_id = block['Id']
        block_map[block_id] = block
        if block['BlockType'] == "KEY_VALUE_SET":
            if 'KEY' in block['EntityTypes']:
                key_map[block_id] = block
            else:
                value_map[block_id] = block

    return key_map, value_map, block_map


def get_text(block, blocks_map):

    """Retrieves text associated with a block.

    Args:
        block (dict): Information related to one Block Object
        blocks_map (dict): All Block objects analyzed by textract.

    Returns:
        str: Text associated with a Block.
    """

    text = ''
    if 'Relationships' in block:
        for relationship in block['Relationships']:
            if relationship['Type'] == 'CHILD':
                for child_id in relationship['Ids']:
                    word = blocks_map[child_id]
                    if word['BlockType'] == 'WORD':
                        text += word['Text'] + ' '
    return text


def get_selection_elements(bmap, vmap, kmap):
    """Finds the selection element Blocks and their corresponding text

    Args:
        bmap (dict): All blocks in the document.
        vmap (dict): All VALUE entity blocks.
        kmap (dict): All KEY entity blocks.

    Returns:
        dict: information about the selection element as well as its
        associated text.
    """
    selection_map = {}
    value_block_id = ''
    for id, block in bmap.items():
        if block['BlockType'] == 'SELECTION_ELEMENT':
            for _, value_block in vmap.items():
                if 'Relationships' in value_block:
                    for relationship in value_block['Relationships']:
                        if relationship['Type'] == 'CHILD':
                            if relationship['Ids'][0] == id:
                                value_block_id = value_block['Id']
                                for _, key_block in kmap.items():
                                    for relationship in key_block['Relationships']:
                                        if relationship['Type'] == 'VALUE':
                                            if relationship['Ids'][0] == value_block_id:
                                                selection_text = get_text(
                                                    key_block, bmap)
            block['Text'] = selection_text
            selection_map[id] = block
    return selection_map
